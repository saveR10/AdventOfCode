using AOC;
using AOC.DataStructures.Clustering;
using AOC.Documents.LINQ;
using AOC.Model;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Numerics;
using System.Text.RegularExpressions;
using static System.Net.Mime.MediaTypeNames;

namespace AOC2023
{
    //DA SISTEMARE
    public class Day16 : Solver, IDay
    {
        public static String[] delimiters = { "\r\n", " " };
        public static String[] delimiter_space = { " " };
        public static String[] delimiter_line = { "\r\n" };
        public static String[] delimiter_equals = { "=" };
        public static String[] delimiter_signs = { "=", "-" };
        public static String[] delimiter_parentesi = { "(", ")", "," };
        public static String[] delimiter_comma = { "," };
        public string Contraption_string = "";
        public long focusingPower;
        public long EnergizedTiles = 0;
        public int n;
        bool Spread = false;
        public string[,] ExploredTile;
        char[,] Tile;
        public List<Beam> Beams = new List<Beam>();
        public List<Beam> NewBeams = new List<Beam>();

        long Partial_Count = 0;
        long Total_Count = 0;
        public void Part1(object input, bool test, ref object solution)
        {
            test = false;

            if (!test)
            {
                Contraption_string = @"\|.......|........|...../........................\.\.......\...-../..........\.........|...\......|...........
.|.../............|.....|\..../....-.\...........-............./......................|.-.-...........\.....-.
...............|........-....-...../..../|./.............\..|..................\..........|\.........../.\....
....................|\..................\..................\/....................-....../................\.|..
......././-......................................|.....|./.............................../....................
.......................\.....|............-...\..|......-./...\.........../.............|..-......-...../.....
.....................-.......\.......|............./........\.......|........../............/.................
..................-................-./....................|....|...................-..................\.......
|.......././.................................|.....-............................-.........|......../../.......
.........../.......-........|................/......-....|.......\/..|..\...|..............-....\....|...-....
............./-......./.....-./....\........./..|...............|..-......................-...................
......-\.\..|/......-.|.........-.......-..\|.............................\.-.............\...............\...
......\..../................\.........\..|...............-.......|..-|.....|-..........................-......
.....\....../../..........\......-...........\.......-.\........./...........|\............-.............\....
........\....................|........./...................|.........-.........\..............................
.........-|.............\-.............................-..............|.....\../......|/......................
..................../.......\/......./................../...../.......................|......|./.-......-|....
..................../.........|..-.-./....../.|-..\..|........|......-.................\...\........./...\....
....-...-....../...............................................|....................\..-..............-..|.-.\
..........\..\.\....................-...|......................\......|......-.................\....|....../..
\................../.....-./.......-...........\..../....../....|.........|........................|..........
../......\.|..............................|../......................-.\..........\...............|..........|.
.|..............................-...-........|...-........|........../............\...../.\......-....|.......
............./...................\.\.........|...|../..........-.......\........../.-.-.....-..........-......
..........................-.|\......|......./|.............../..../......--.....|.........|........../........
/-....|/...-|..........\......................./..........-.....-.............\....../................\.......
............-../............\...............................-.........\...\...........|-....|.................
..............................|........-.........-..................|...........................-.............
........./...............//.........................................-..........|............|..../............
...\..||../........................./................|......./.......|....|.....|............|................
........./...................\-./.......\...../............../..........-|...................|..../.......|...
...../................/..-............../....................|/......................................-.|......
\|........................................\...........-......../...\.|......|..\../........|.......\..........
..|/......\....-...............||......//..................\\..-./...-....................|...................
./....../................\../.\.....\.........\.\\\..........................-..\..-............./-...........
........|..........-.....|..\..../....../.................../.............\...-.\...........\...........-.....
..........\...|/..|......|\/./...........-.|.................-.|....|....................../..................
-.......................-.|.............-../......./.../...-|..|.........../../..\............\../..........|.
................./.........\..........-.........../..|.......//..............|..................|.....\.......
.............-../......\./.../.|.|.....-..|.....|...\.........|.....-/..................-................|....
|.-\..../...........-.....|....................//........\............./....../........./../\..\....-.........
......\.|...........|..............|............/....-../.....\..................../...................|......
../|....\....................................-.....--...|....../........-...................|...\.......\.....
..........|../..-.........-...........|....................../............/.......................|.|.........
........./..................\............................\..............|..................................\..
...-|...........-......\|\...........\...\.........|..../......../..../..../..-|||................-...........
..|....-\..\......./...........\\.................................|......-./.............../........|..--.....
.................................../|...........-.......-...|..-............-........../......................
.......|.............|.......................................................\...............\................
........\.......|...........|............................\-......................................|............
......|..\.-../......................|.-.../.....-..|.-.................................-.......\......./.|...
--\...../..........-...........\...................../.....|/............\..............-............./.......
......|-...............\........................................../.-\..|.....-........|..\./../.-..........|.
.........................//.....-...................|...|..-.\....|................|......\..-............/...
./.........-...-....................../......\\......||..........|....................--.................../..
....-........\........................../..........|........./.........................\.\....|.......-|......
.|\/...............|...-.|....|../..|...|...../......\..........|.............|........\.....|................
...../.-\.-................|......../....-..\......|/.......\.......................\.......................|.
......................|..........-..../..../.\../................../......................|..............\|...
........../-\......|............................../....-......................................./..............
./..........|.....-.............-..-...|../........\.-...........|.........................-................-.
.-....-................|..................-...-...........-........|.|..........-.-...........................
...|...............|.................\.......|.............../................\....|.............|.........\..
..\..............|.............\..................\.......................|..........-........................
../........./............\.\../.........................\../.....-....|....................-............../...
...\................\......../......................./\....\..-........\........./..\.........................
.........../..|.......-.........-|..............................................\...............-./\||...../..
...............\........-..|..........||......................../..........-...../........................\...
...........\.....................-................................................................|..........|
./.........-.......-................................\..........||..|.|..\.........\.../..||......-.......\....
\......\.........-..\......\...................-..|.....\.....\....................|..........-......-........
.............|..........\..........-..................\.\..........|.....................|.............-/.....
........-................|......./..-...............\......|-...\.....\.............|./..\\../....-.../.......
..................\..||.............-........|............/.........\../...\..|/.....\.........\..........|...
..|../..................\..............................|...........................................-..........
\..................../.|.......\...|-............../......\.............././..-...................|...........
......./..............................\..................|................\............./....-.....-..........
..............|.........../...............................\.................\..|........-.......-.\.....|.....
.................|.....\........................................-.\.\..\...................//.....\./.........
....../..........|..-............/..........\............../.............|....................................
.............|..........-.|..\..........-....\...........................|.....................\.\....-.......
..........\............../........-........|.....-./...........................................\..........\...
..........|.-...|.|...............-...|.|..................-...-........|/.../.............................\..
.............-....\.....................................................\........................|...........\
..\|...........|....-.-|........................................|.............................\.....\.-|......
...........//.|.............-......\.........................|............-|...............././.....|....|....
.............../.\...............--........|........-....\..../.........-.....................-......../...-..
.....|......\.........../............/..................../.........|...........-.......-.|...........-.......
.................-........./..........|...................../..........................|.|...........-.......|
.....|...-........|...................../.../...................................\.............\...|...........
.............\.......|........................./....|........./........\.........\.......................\....
............................/-..................................../........-..............\...|.....\..|\.....
...-..././....................-.......|................./..........-.....|.|..............\..........-....\...
.....\\......\...............................-...-........-.|..../........\.\.....-.....................|.....
..............\.........\.\.|..........-......//./.../....|.............-.../..|.........................\....
...................../...........\.........................\.-..|..........|........./|...............|/...\|.
..|.-./.............-.........././.|......../.......\...........-.........../..........\.....-.........-......
.....|......\....-.........-.............|.......|-........|-...-../-..|.......-................-.............
.................|.........|....\................................/.-.....|........./..../..........-..........
-....\......./......\.\..................-..|./......-...\.\...-.........................\.............|......
......................./..............\/..........-................../............\.......\..\.......\....../.
.|...............//.................................../.......\.......\.\..........-\...|............-........
.../......................|.....-.........../................-.../............../.........\.\.../........../..
..................................|\..................-../........-./..\......./....|../.......|-.............
.....\..........|................/........\..........-......../\../..../.\-.|...\....|\.............\|..--....
................./................................././|..../..........|............../............../.........
..............|......|.......\....|...|......|..................................\.......-....\/...........|...
......./\..................................-......./......\....\..-..................-................\......|
...........-.........../..............\............|....../....../.......\........./......../..\.........\...-
.-..................\............................/\...................|...........|....\....\--/............/.";
            }
            else
            {
                Contraption_string = @".|...\....
|.-.\.....
.....|-...
........|.
..........
.........\
..../.\\..
.-.-/..|..
.|....-|.\
..//.|....";
            }


            var Contraption_array = Contraption_string.Split(delimiter_line, StringSplitOptions.None);
            n = Contraption_array.Length;

            Tile = new char[n, n];
            ExploredTile = new string[n, n];
            for (int r = 0; r < Contraption_array.Length; r++)
            {
                for (int c = 0; c < Contraption_array[r].Length; c++)
                {
                    Tile[c, r] = Contraption_array[r][c];
                    ExploredTile[c, r] = "";
                }
            }

            Beam firstBeam = new Beam(-1, 0, DirectionEnum.Right, n);
            Beams.Add(firstBeam);
            while (!Beams.All(b => b.Spreaded))
            {
                Spreading(Beams);
                if (Beams.Count == 0) Conta();
                Console.WriteLine($"{Beams[0].x},{Beams[0].y},       numero di Beams:{Beams.Count}");
            }
        }
        public class Beam
        {
            public Beam() { }
            public Beam(int x, int y, DirectionEnum de, int n)
            {
                this.x = x;
                this.y = y;
                this.Direction = de;
            }
            public int x;
            public int y;


            public bool Spreaded = false;

            private DirectionEnum _direction;
            public DirectionEnum Direction
            {
                get { return _direction; }
                set
                {
                    if (value >= 0 && (int)value < 4)
                    {
                        _direction = value;
                    }
                    else
                    {
                        _direction = ((DirectionEnum)((int)(value + 4) % 4));
                    }
                }
            }
            public bool Processed = false;

        }
        public enum DirectionEnum
        {
            Up,
            Right,
            Down,
            Left
        }

        public string ConvertDirectionToLetter(DirectionEnum de)
        {
            Beam b = new Beam();
            b.Direction = de;
            switch (b.Direction)
            {
                case DirectionEnum.Up: return "U"; break;
                case DirectionEnum.Right: return "R"; break;
                case DirectionEnum.Down: return "D"; break;
                case DirectionEnum.Left: return "L"; break;
            }
            return "";
        }

        public class Position
        {
            public int x { get; set; }
            public int y { get; set; }
        }

        public void Conta()
        {
            long count = 0;
            foreach (string item in ExploredTile)
            {
                if (!string.IsNullOrEmpty(item)) count++;
            }

        }
        public void Conta2()
        {
            foreach (string item in ExploredTile)
            {
                if (!string.IsNullOrEmpty(item)) Partial_Count++;
            }
            if (Partial_Count > Total_Count) Total_Count = Partial_Count;
        }

        //7468 too low

        public void Spreading(List<Beam> BeamList)
        {
            foreach (var beam in BeamList)
            {
                if (beam.x == 6 && beam.y == 2)
                {

                }
                switch (beam.Direction)
                {
                    case DirectionEnum.Up:
                        if (beam.y != 0)
                        {
                            beam.y = beam.y - 1;
                            if (!ExploredTile[beam.x, beam.y].Contains("U")) ExploredTile[beam.x, beam.y] += "U";
                            else { beam.Spreaded = true; break; }

                            if (Tile[beam.x, beam.y] == '/') beam.Direction += 1;
                            if (Tile[beam.x, beam.y].Equals('\\')) beam.Direction -= 1;
                            if (Tile[beam.x, beam.y] == '-')
                            {
                                beam.Spreaded = true;
                                if (!ExploredTile[beam.x, beam.y].Contains(ConvertDirectionToLetter(beam.Direction - 1)))
                                {
                                    NewBeams.Add(new Beam(beam.x, beam.y, beam.Direction - 1, n));
                                    ExploredTile[beam.x, beam.y] += ConvertDirectionToLetter(beam.Direction - 1);
                                }
                                if (!ExploredTile[beam.x, beam.y].Contains(ConvertDirectionToLetter(beam.Direction + 1)))
                                {
                                    NewBeams.Add(new Beam(beam.x, beam.y, beam.Direction + 1, n));
                                    ExploredTile[beam.x, beam.y] += ConvertDirectionToLetter(beam.Direction + 1);
                                }

                            }
                        }
                        else beam.Spreaded = true;

                        break;
                    case DirectionEnum.Right:
                        if (beam.x != n - 1)
                        {
                            beam.x = beam.x + 1;

                            if (!ExploredTile[beam.x, beam.y].Contains("R")) ExploredTile[beam.x, beam.y] += "R";
                            else { beam.Spreaded = true; break; }

                            if (Tile[beam.x, beam.y] == '/') beam.Direction -= 1;
                            if (Tile[beam.x, beam.y].Equals('\\')) beam.Direction += 1;
                            if (Tile[beam.x, beam.y] == '|')
                            {
                                beam.Spreaded = true;
                                if (!ExploredTile[beam.x, beam.y].Contains(ConvertDirectionToLetter(beam.Direction - 1)))
                                {
                                    NewBeams.Add(new Beam(beam.x, beam.y, beam.Direction - 1, n));
                                    ExploredTile[beam.x, beam.y] += ConvertDirectionToLetter(beam.Direction - 1);
                                }
                                if (!ExploredTile[beam.x, beam.y].Contains(ConvertDirectionToLetter(beam.Direction + 1)))
                                {
                                    NewBeams.Add(new Beam(beam.x, beam.y, beam.Direction + 1, n));
                                    ExploredTile[beam.x, beam.y] += ConvertDirectionToLetter(beam.Direction + 1);
                                }
                            }
                        }
                        else beam.Spreaded = true;

                        break;
                    case DirectionEnum.Down:
                        if (beam.y != n - 1)
                        {
                            beam.y = beam.y + 1;
                            if (!ExploredTile[beam.x, beam.y].Contains("D")) ExploredTile[beam.x, beam.y] += "D";
                            else { beam.Spreaded = true; break; }

                            if (Tile[beam.x, beam.y] == '/') beam.Direction += 1;
                            if (Tile[beam.x, beam.y].Equals('\\')) beam.Direction -= 1;
                            if (Tile[beam.x, beam.y] == '-')
                            {
                                beam.Spreaded = true;
                                if (!ExploredTile[beam.x, beam.y].Contains(ConvertDirectionToLetter(beam.Direction - 1)))
                                {
                                    NewBeams.Add(new Beam(beam.x, beam.y, beam.Direction - 1, n));
                                    ExploredTile[beam.x, beam.y] += ConvertDirectionToLetter(beam.Direction - 1);
                                }
                                if (!ExploredTile[beam.x, beam.y].Contains(ConvertDirectionToLetter(beam.Direction + 1)))
                                {
                                    NewBeams.Add(new Beam(beam.x, beam.y, beam.Direction + 1, n));
                                    ExploredTile[beam.x, beam.y] += ConvertDirectionToLetter(beam.Direction + 1);
                                }


                            }
                        }
                        else beam.Spreaded = true;

                        break;
                    case DirectionEnum.Left:
                        if (beam.x != 0)
                        {
                            beam.x = beam.x - 1;
                            if (!ExploredTile[beam.x, beam.y].Contains("L")) ExploredTile[beam.x, beam.y] += "L";
                            else { beam.Spreaded = true; break; }


                            if (Tile[beam.x, beam.y] == '/') beam.Direction -= 1;
                            if (Tile[beam.x, beam.y].Equals('\\')) beam.Direction += 1;
                            if (Tile[beam.x, beam.y] == '|')
                            {
                                beam.Spreaded = true;
                                if (!ExploredTile[beam.x, beam.y].Contains(ConvertDirectionToLetter(beam.Direction - 1)))
                                {
                                    NewBeams.Add(new Beam(beam.x, beam.y, beam.Direction - 1, n));
                                    ExploredTile[beam.x, beam.y] += ConvertDirectionToLetter(beam.Direction - 1);
                                }
                                if (!ExploredTile[beam.x, beam.y].Contains(ConvertDirectionToLetter(beam.Direction + 1)))
                                {
                                    NewBeams.Add(new Beam(beam.x, beam.y, beam.Direction + 1, n));
                                    ExploredTile[beam.x, beam.y] += ConvertDirectionToLetter(beam.Direction + 1);
                                }
                            }
                        }
                        else beam.Spreaded = true;
                        break;
                }
            }

            foreach (var beam in NewBeams)
            {
                Beams.Add(new Beam(beam.x, beam.y, beam.Direction, n));
            }
            NewBeams.Clear();


            Beams.RemoveAll(b => b.Spreaded);
        }

        public void Spreading2(List<Beam> BeamList)
        {
            foreach (var beam in BeamList)
            {
                if (beam.x == 6 && beam.y == 2)
                {

                }
                switch (beam.Direction)
                {
                    case DirectionEnum.Up:
                        if (beam.y != 0)
                        {
                            beam.y = beam.y - 1;
                            if (!ExploredTile[beam.x, beam.y].Contains("U")) ExploredTile[beam.x, beam.y] += "U";
                            else { beam.Spreaded = true; break; }

                            if (Tile[beam.x, beam.y] == '/') beam.Direction += 1;
                            if (Tile[beam.x, beam.y].Equals('\\')) beam.Direction -= 1;
                            if (Tile[beam.x, beam.y] == '-')
                            {
                                beam.Spreaded = true;
                                if (!ExploredTile[beam.x, beam.y].Contains(ConvertDirectionToLetter(beam.Direction - 1)))
                                {
                                    NewBeams.Add(new Beam(beam.x, beam.y, beam.Direction - 1, n));
                                    ExploredTile[beam.x, beam.y] += ConvertDirectionToLetter(beam.Direction - 1);
                                }
                                if (!ExploredTile[beam.x, beam.y].Contains(ConvertDirectionToLetter(beam.Direction + 1)))
                                {
                                    NewBeams.Add(new Beam(beam.x, beam.y, beam.Direction + 1, n));
                                    ExploredTile[beam.x, beam.y] += ConvertDirectionToLetter(beam.Direction + 1);
                                }

                            }
                        }
                        else beam.Spreaded = true;

                        break;
                    case DirectionEnum.Right:
                        if (beam.x != n - 1)
                        {
                            beam.x = beam.x + 1;

                            if (!ExploredTile[beam.x, beam.y].Contains("R")) ExploredTile[beam.x, beam.y] += "R";
                            else { beam.Spreaded = true; break; }

                            if (Tile[beam.x, beam.y] == '/') beam.Direction -= 1;
                            if (Tile[beam.x, beam.y].Equals('\\')) beam.Direction += 1;
                            if (Tile[beam.x, beam.y] == '|')
                            {
                                beam.Spreaded = true;
                                if (!ExploredTile[beam.x, beam.y].Contains(ConvertDirectionToLetter(beam.Direction - 1)))
                                {
                                    NewBeams.Add(new Beam(beam.x, beam.y, beam.Direction - 1, n));
                                    ExploredTile[beam.x, beam.y] += ConvertDirectionToLetter(beam.Direction - 1);
                                }
                                if (!ExploredTile[beam.x, beam.y].Contains(ConvertDirectionToLetter(beam.Direction + 1)))
                                {
                                    NewBeams.Add(new Beam(beam.x, beam.y, beam.Direction + 1, n));
                                    ExploredTile[beam.x, beam.y] += ConvertDirectionToLetter(beam.Direction + 1);
                                }
                            }
                        }
                        else beam.Spreaded = true;

                        break;
                    case DirectionEnum.Down:
                        if (beam.y != n - 1)
                        {
                            beam.y = beam.y + 1;
                            if (!ExploredTile[beam.x, beam.y].Contains("D")) ExploredTile[beam.x, beam.y] += "D";
                            else { beam.Spreaded = true; break; }

                            if (Tile[beam.x, beam.y] == '/') beam.Direction += 1;
                            if (Tile[beam.x, beam.y].Equals('\\')) beam.Direction -= 1;
                            if (Tile[beam.x, beam.y] == '-')
                            {
                                beam.Spreaded = true;
                                if (!ExploredTile[beam.x, beam.y].Contains(ConvertDirectionToLetter(beam.Direction - 1)))
                                {
                                    NewBeams.Add(new Beam(beam.x, beam.y, beam.Direction - 1, n));
                                    ExploredTile[beam.x, beam.y] += ConvertDirectionToLetter(beam.Direction - 1);
                                }
                                if (!ExploredTile[beam.x, beam.y].Contains(ConvertDirectionToLetter(beam.Direction + 1)))
                                {
                                    NewBeams.Add(new Beam(beam.x, beam.y, beam.Direction + 1, n));
                                    ExploredTile[beam.x, beam.y] += ConvertDirectionToLetter(beam.Direction + 1);
                                }


                            }
                        }
                        else beam.Spreaded = true;

                        break;
                    case DirectionEnum.Left:
                        if (beam.x != 0)
                        {
                            beam.x = beam.x - 1;
                            if (!ExploredTile[beam.x, beam.y].Contains("L")) ExploredTile[beam.x, beam.y] += "L";
                            else { beam.Spreaded = true; break; }


                            if (Tile[beam.x, beam.y] == '/') beam.Direction -= 1;
                            if (Tile[beam.x, beam.y].Equals('\\')) beam.Direction += 1;
                            if (Tile[beam.x, beam.y] == '|')
                            {
                                beam.Spreaded = true;
                                if (!ExploredTile[beam.x, beam.y].Contains(ConvertDirectionToLetter(beam.Direction - 1)))
                                {
                                    NewBeams.Add(new Beam(beam.x, beam.y, beam.Direction - 1, n));
                                    ExploredTile[beam.x, beam.y] += ConvertDirectionToLetter(beam.Direction - 1);
                                }
                                if (!ExploredTile[beam.x, beam.y].Contains(ConvertDirectionToLetter(beam.Direction + 1)))
                                {
                                    NewBeams.Add(new Beam(beam.x, beam.y, beam.Direction + 1, n));
                                    ExploredTile[beam.x, beam.y] += ConvertDirectionToLetter(beam.Direction + 1);
                                }
                            }
                        }
                        else beam.Spreaded = true;
                        break;
                }
            }

            foreach (var beam in NewBeams)
            {
                Beams.Add(new Beam(beam.x, beam.y, beam.Direction, n));
            }
            NewBeams.Clear();


            Beams.RemoveAll(b => b.Spreaded);
        }

        public void TransfertExploredPosition(Beam beam)
        {
            for (int r = 0; r < n; r++)
            {
                for (int c = 0; c < n; c++)
                {
                    /*    if (!string.IsNullOrEmpty(beam.ExploredTile[r, c]))
                        {
                            for (int l = 0; l < beam.ExploredTile[r, c].Length; l++)
                            {
                                if (!ExploredTile[r, c].Contains(beam.ExploredTile[r, c]))
                                {
                                    ExploredTile[r, c] += beam.ExploredTile[r, c];
                                }

                         }
                        }*/
                }
            }
        }


        public void Part2(object input, bool test, ref object solution)
        {
            test = false;

            if (!test)
            {
                Contraption_string = @"\|.......|........|...../........................\.\.......\...-../..........\.........|...\......|...........
.|.../............|.....|\..../....-.\...........-............./......................|.-.-...........\.....-.
...............|........-....-...../..../|./.............\..|..................\..........|\.........../.\....
....................|\..................\..................\/....................-....../................\.|..
......././-......................................|.....|./.............................../....................
.......................\.....|............-...\..|......-./...\.........../.............|..-......-...../.....
.....................-.......\.......|............./........\.......|........../............/.................
..................-................-./....................|....|...................-..................\.......
|.......././.................................|.....-............................-.........|......../../.......
.........../.......-........|................/......-....|.......\/..|..\...|..............-....\....|...-....
............./-......./.....-./....\........./..|...............|..-......................-...................
......-\.\..|/......-.|.........-.......-..\|.............................\.-.............\...............\...
......\..../................\.........\..|...............-.......|..-|.....|-..........................-......
.....\....../../..........\......-...........\.......-.\........./...........|\............-.............\....
........\....................|........./...................|.........-.........\..............................
.........-|.............\-.............................-..............|.....\../......|/......................
..................../.......\/......./................../...../.......................|......|./.-......-|....
..................../.........|..-.-./....../.|-..\..|........|......-.................\...\........./...\....
....-...-....../...............................................|....................\..-..............-..|.-.\
..........\..\.\....................-...|......................\......|......-.................\....|....../..
\................../.....-./.......-...........\..../....../....|.........|........................|..........
../......\.|..............................|../......................-.\..........\...............|..........|.
.|..............................-...-........|...-........|........../............\...../.\......-....|.......
............./...................\.\.........|...|../..........-.......\........../.-.-.....-..........-......
..........................-.|\......|......./|.............../..../......--.....|.........|........../........
/-....|/...-|..........\......................./..........-.....-.............\....../................\.......
............-../............\...............................-.........\...\...........|-....|.................
..............................|........-.........-..................|...........................-.............
........./...............//.........................................-..........|............|..../............
...\..||../........................./................|......./.......|....|.....|............|................
........./...................\-./.......\...../............../..........-|...................|..../.......|...
...../................/..-............../....................|/......................................-.|......
\|........................................\...........-......../...\.|......|..\../........|.......\..........
..|/......\....-...............||......//..................\\..-./...-....................|...................
./....../................\../.\.....\.........\.\\\..........................-..\..-............./-...........
........|..........-.....|..\..../....../.................../.............\...-.\...........\...........-.....
..........\...|/..|......|\/./...........-.|.................-.|....|....................../..................
-.......................-.|.............-../......./.../...-|..|.........../../..\............\../..........|.
................./.........\..........-.........../..|.......//..............|..................|.....\.......
.............-../......\./.../.|.|.....-..|.....|...\.........|.....-/..................-................|....
|.-\..../...........-.....|....................//........\............./....../........./../\..\....-.........
......\.|...........|..............|............/....-../.....\..................../...................|......
../|....\....................................-.....--...|....../........-...................|...\.......\.....
..........|../..-.........-...........|....................../............/.......................|.|.........
........./..................\............................\..............|..................................\..
...-|...........-......\|\...........\...\.........|..../......../..../..../..-|||................-...........
..|....-\..\......./...........\\.................................|......-./.............../........|..--.....
.................................../|...........-.......-...|..-............-........../......................
.......|.............|.......................................................\...............\................
........\.......|...........|............................\-......................................|............
......|..\.-../......................|.-.../.....-..|.-.................................-.......\......./.|...
--\...../..........-...........\...................../.....|/............\..............-............./.......
......|-...............\........................................../.-\..|.....-........|..\./../.-..........|.
.........................//.....-...................|...|..-.\....|................|......\..-............/...
./.........-...-....................../......\\......||..........|....................--.................../..
....-........\........................../..........|........./.........................\.\....|.......-|......
.|\/...............|...-.|....|../..|...|...../......\..........|.............|........\.....|................
...../.-\.-................|......../....-..\......|/.......\.......................\.......................|.
......................|..........-..../..../.\../................../......................|..............\|...
........../-\......|............................../....-......................................./..............
./..........|.....-.............-..-...|../........\.-...........|.........................-................-.
.-....-................|..................-...-...........-........|.|..........-.-...........................
...|...............|.................\.......|.............../................\....|.............|.........\..
..\..............|.............\..................\.......................|..........-........................
../........./............\.\../.........................\../.....-....|....................-............../...
...\................\......../......................./\....\..-........\........./..\.........................
.........../..|.......-.........-|..............................................\...............-./\||...../..
...............\........-..|..........||......................../..........-...../........................\...
...........\.....................-................................................................|..........|
./.........-.......-................................\..........||..|.|..\.........\.../..||......-.......\....
\......\.........-..\......\...................-..|.....\.....\....................|..........-......-........
.............|..........\..........-..................\.\..........|.....................|.............-/.....
........-................|......./..-...............\......|-...\.....\.............|./..\\../....-.../.......
..................\..||.............-........|............/.........\../...\..|/.....\.........\..........|...
..|../..................\..............................|...........................................-..........
\..................../.|.......\...|-............../......\.............././..-...................|...........
......./..............................\..................|................\............./....-.....-..........
..............|.........../...............................\.................\..|........-.......-.\.....|.....
.................|.....\........................................-.\.\..\...................//.....\./.........
....../..........|..-............/..........\............../.............|....................................
.............|..........-.|..\..........-....\...........................|.....................\.\....-.......
..........\............../........-........|.....-./...........................................\..........\...
..........|.-...|.|...............-...|.|..................-...-........|/.../.............................\..
.............-....\.....................................................\........................|...........\
..\|...........|....-.-|........................................|.............................\.....\.-|......
...........//.|.............-......\.........................|............-|...............././.....|....|....
.............../.\...............--........|........-....\..../.........-.....................-......../...-..
.....|......\.........../............/..................../.........|...........-.......-.|...........-.......
.................-........./..........|...................../..........................|.|...........-.......|
.....|...-........|...................../.../...................................\.............\...|...........
.............\.......|........................./....|........./........\.........\.......................\....
............................/-..................................../........-..............\...|.....\..|\.....
...-..././....................-.......|................./..........-.....|.|..............\..........-....\...
.....\\......\...............................-...-........-.|..../........\.\.....-.....................|.....
..............\.........\.\.|..........-......//./.../....|.............-.../..|.........................\....
...................../...........\.........................\.-..|..........|........./|...............|/...\|.
..|.-./.............-.........././.|......../.......\...........-.........../..........\.....-.........-......
.....|......\....-.........-.............|.......|-........|-...-../-..|.......-................-.............
.................|.........|....\................................/.-.....|........./..../..........-..........
-....\......./......\.\..................-..|./......-...\.\...-.........................\.............|......
......................./..............\/..........-................../............\.......\..\.......\....../.
.|...............//.................................../.......\.......\.\..........-\...|............-........
.../......................|.....-.........../................-.../............../.........\.\.../........../..
..................................|\..................-../........-./..\......./....|../.......|-.............
.....\..........|................/........\..........-......../\../..../.\-.|...\....|\.............\|..--....
................./................................././|..../..........|............../............../.........
..............|......|.......\....|...|......|..................................\.......-....\/...........|...
......./\..................................-......./......\....\..-..................-................\......|
...........-.........../..............\............|....../....../.......\........./......../..\.........\...-
.-..................\............................/\...................|...........|....\....\--/............/.";
            }
            else
            {
                Contraption_string = @".|...\....
|.-.\.....
.....|-...
........|.
..........
.........\
..../.\\..
.-.-/..|..
.|....-|.\
..//.|....";
            }


            var Contraption_array = Contraption_string.Split(delimiter_line, StringSplitOptions.None);
            n = Contraption_array.Length;

            //FROM LEFT SIDE
            for (int i = 0; i < n; i++)
            {
                Partial_Count = 0;
                Tile = new char[n, n];
                ExploredTile = new string[n, n];
                for (int r = 0; r < Contraption_array.Length; r++)
                {
                    for (int c = 0; c < Contraption_array[r].Length; c++)
                    {
                        Tile[c, r] = Contraption_array[r][c];
                        ExploredTile[c, r] = "";
                    }
                }

                Beam firstBeam = new Beam(-1, i, DirectionEnum.Right, n);
                Beams.Add(firstBeam);
                while (!Beams.All(b => b.Spreaded))
                {
                    Spreading2(Beams);
                    if (Beams.Count == 0)
                    {
                        Conta();
                        break;
                    }
                    Console.WriteLine($"{Beams[0].x},{Beams[0].y},       numero di Beams:{Beams.Count}");
                }
            }


            //FROM TOP ROW
            for (int i = 0; i < n; i++)
            {
                Partial_Count = 0;
                Tile = new char[n, n];
                ExploredTile = new string[n, n];
                for (int r = 0; r < Contraption_array.Length; r++)
                {
                    for (int c = 0; c < Contraption_array[r].Length; c++)
                    {
                        Tile[c, r] = Contraption_array[r][c];
                        ExploredTile[c, r] = "";
                    }
                }

                Beam firstBeam = new Beam(i, -1, DirectionEnum.Down, n);
                Beams.Add(firstBeam);
                while (!Beams.All(b => b.Spreaded))
                {
                    Spreading2(Beams);
                    if (Beams.Count == 0)
                    {
                        Conta2();
                        break;
                    }
                    Console.WriteLine($"{Beams[0].x},{Beams[0].y},       numero di Beams:{Beams.Count}");
                }
            }

            //FROM RIGHT SIDE
            for (int i = 0; i < n; i++)
            {
                Partial_Count = 0;
                Tile = new char[n, n];
                ExploredTile = new string[n, n];
                for (int r = 0; r < Contraption_array.Length; r++)
                {
                    for (int c = 0; c < Contraption_array[r].Length; c++)
                    {
                        Tile[c, r] = Contraption_array[r][c];
                        ExploredTile[c, r] = "";
                    }
                }

                Beam firstBeam = new Beam(n, i, DirectionEnum.Left, n);
                Beams.Add(firstBeam);
                while (!Beams.All(b => b.Spreaded))
                {
                    Spreading2(Beams);
                    if (Beams.Count == 0)
                    {
                        Conta2();
                        break;
                    }
                    Console.WriteLine($"{Beams[0].x},{Beams[0].y},       numero di Beams:{Beams.Count}");
                }
            }


            //FROM BOTTOM ROW
            for (int i = 0; i < n; i++)
            {
                Partial_Count = 0;
                Tile = new char[n, n];
                ExploredTile = new string[n, n];
                for (int r = 0; r < Contraption_array.Length; r++)
                {
                    for (int c = 0; c < Contraption_array[r].Length; c++)
                    {
                        Tile[c, r] = Contraption_array[r][c];
                        ExploredTile[c, r] = "";
                    }
                }

                Beam firstBeam = new Beam(i, n, DirectionEnum.Up, n);
                Beams.Add(firstBeam);
                while (!Beams.All(b => b.Spreaded))
                {
                    Spreading2(Beams);
                    if (Beams.Count == 0)
                    {
                        Conta2();
                        break;
                    }
                    Console.WriteLine($"{Beams[0].x},{Beams[0].y},       numero di Beams:{Beams.Count}");
                }
            }

        }
  

        public void TransfertExploredPosition2(Beam beam)
        {
            for (int r = 0; r < n; r++)
            {
                for (int c = 0; c < n; c++)
                {
                    /*    if (!string.IsNullOrEmpty(beam.ExploredTile[r, c]))
                        {
                            for (int l = 0; l < beam.ExploredTile[r, c].Length; l++)
                            {
                                if (!ExploredTile[r, c].Contains(beam.ExploredTile[r, c]))
                                {
                                    ExploredTile[r, c] += beam.ExploredTile[r, c];
                                }

                         }
                        }*/
                }
            }
        }

    }
}
