using AOC;
using AOC.DataStructures.Clustering;
using AOC.Documents.LINQ;
using AOC.Model;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Numerics;
using System.Text;
using System.Text.RegularExpressions;
using static System.Net.Mime.MediaTypeNames;

namespace AOC2023
{
    //DA SISTEMARE
    public class Day13 : Solver, IDay
    {
        public static String[] delimiters = { "\r\n", " " };
        public static String[] delimiter_space = { " " };
        public static String[] delimiter_line = { "\r\n" };
        public static String[] delimiter_equals = { "=" };
        public static String[] delimiter_parentesi = { "(", ")", "," };
        //public List<int[]> _YouAre = new List<int[]>();
        //public List<int[]> _NextYou = new List<int[]>();
        //public List<int[]> _VisitedPositions = new List<int[]>();
        public string Notes = "";
        public int n;

        public long Sum = 0;


        public void Part1(object input, bool test, ref object solution)
        {
            test = false;

            if (!test)
            {
                Notes = @"##....###.#..
########...#.
##.##.##.#.##
........###.#
........#.#.#
#######.###..
.#.##.#.#....
..####..##..#
##.##.##.##.#
##.##.##.##.#
..####..##..#
.#.##.#.#....
#######.###..
........#.#.#
........###.#

#.###..#..###
.#...##.####.
.#...##.####.
#.###..#..###
.#######.##.#
.#..##.#.#..#
..#..#.##.#..
##..##..###.#
######.##..#.
######.##....
##..##..###.#
..#..#.##.#..
.#..##.#.#..#

#......
#......
....#..
#.#.###
#####..
###.##.
...#.##
#.#.###
####.#.
..##..#
..##..#
####.#.
#.#.###
...#.##
###.##.
###.#..
#.#.###

.......#.
.#..#...#
######.##
#.##.##.#
#.##.##.#
#.##.##.#
#.##.####
######.##
.#..#...#

.##.#..#.##.###
####.#..#######
.##.##.#.######
#..#.#..#..#.##
.##.##.##.###..
..#.#.#.#.#.#..
....#.#..#.####

#####.##.##
.##..#.....
.##..####..
####......#
.##.#.##.#.
....##..##.
......##...

...#.##....##.#..
##..##########..#
.####..#..#..####
######..##..#####
#.##.#.####.#.##.
..##.#.#..#.#.##.
.####.######.####
......##..##.....
#.##.#.#..#.#.##.

#.##.##
######.
.#..#..
#.##.##
.#..#.#
......#
.#..#.#
.#..#.#
#....#.
#....##
#....##
#....#.
.#..#.#
.#..#.#
......#
.#..#.#
#.##.#.

..###.#
.#...##
####...
....###
....###
####...
.#...##

##..##......##...
##..##......##..#
.####.##.##.##.#.
.##.#.#..#..##.##
#.#.#.#.####...#.
.......#.#.#..#.#
######.####....#.
######.####....#.
.......#.#.#..#.#
#.#.#.#.####...#.
.##.#.#..#..##.##
.####.##.##.##.#.
##..##......##..#

...##..
..#....
..#....
..###..
###.#.#
##..#.#
.....##
......#
..#.#..

..##.###...####
......###.##.##
.#.#....##...##
#.#####.##..#..
#.####.###.....
....#.##.#..#..
..#.#.#.###....
..#.#.#.###....
....#.##....#..

###.##..#
.#.......
#.#..#..#
##.##....
.#..#.##.
.##...##.
#....####
.#.#.####
.#.#.####
#....####
.##...##.
.#..#.##.
.#.##....
#.#..#..#
.#.......

###.##..##.###...
.#..######..#.#..
##.#......#.##...
.##..####..##..##
####......####...
##.###..###.##.##
.####....####....
##.##....##.#####
...#.#..#......##
#.#.##..##.#.#...
#.##..##..##.##..
.#..#....#..#....
##....##....#####

###..#..#...#
##...#.#..#..
#..##..######
#..##..######
##...#.#..#..
###..#..#...#
###.##..#....
#.#..#..#.###
#########...#
..#...#..#..#
#.##.####..#.
#####...#..##
#...##..###.#
.###....#...#
.###....##..#

#####...#..####
#.....##..##..#
.....####......
#.##.####..####
#.#.#....#.####
##..##..###.##.
###...#.#.#####
#####.#..##....
....#.#.#.#....
...####.#...##.
.###..#...##..#
#....#....#.##.
..#.#####......
.#.#.#.#.##.##.
.#.###.#.##.##.

.##...##..#
.#.....#..#
###.###.##.
#..##..#..#
#..####....
....#..#..#
..#.####..#
..##....##.
#.#.###.##.
.###..#....
#.#.#.##..#
.#.########
.#.########
#.#.#.##..#
.###..#....
#.#.###.##.
.###....##.

##.#.##.#
##.##..##
..#.#..#.
..##....#
##.##..##
###.####.
..#######
....###..
..###..##
###.####.
..#..##..
##..####.
..#######
...#.##.#
##..#..#.

....####.#.....#.
###.#....#.#.#...
..##..###..#..###
..##..###..#..###
###.#....###.#...
....####.#.....#.
###.####.####.###
.#.#.##.#....#...
.#.#.##.#....#...

#..###...
#..#.#...
.....####
####..#.#
....#.##.
#####.##.
####.#.#.
######.##
.##.#..#.
#####.##.
#..#...#.
#..##..#.
####.#.#.
.##..#...
####..##.
.##.#..##
.##.#.##.

###..###.##.#
....#...#..#.
..#.##..#..#.
..##########.
##...###.##.#
####.##.#..#.
###...#######
...#.###....#
..#..########

.########....####
.##.##.##....##.#
#.#.##.#.####.#.#
..##..##......##.
#..#..#..#..#..#.
#.#.##.#.#..#.#.#
...#..#...##...#.
..######..##..###
.##.##.##....####

###.####..#.#
#########.###
#.####...#...
#.####...#...
##.######.###
###.####..#.#
##.#..#.##...
#..#.##.#...#
..#.########.
..#.########.
#..#.##.#...#

#.#......#.##..#.
##..#..#..##.#.##
.###....###.###.#
.#.##..##.#....#.
####.##..###.####
.###....###.....#
.#.#....#.#..#...
.##.####.##.##...
.##.####.##.##...

###.#.##.####.##.
..#..#...#..#...#
.##..#..#....#..#
...###.#......#.#
##..#.#.#.##.#.#.
.#..#..#..##..#..
.#.....#..##..#..

##.#.#...
.####..##
.####..##
##.#.#...
#...##...
...#..###
.###...#.
###..##..
#.###....

...####
..#.###
..#.###
...####
.###..#
.##....
.#..#..
#..##..
..#.###
..#.###
...##..
.#..#..
.##....
.###..#
...####

......##.###....#
###.#.#.#.#####.#
.###.#...##......
#..#.#.##....##..
.#.#.#..#..######
..#####.....####.
..#..#.#.##......
#.#.#.#.##.#.##.#
.#.#.#..#....##..
..##.#.##.##....#
..##.#.##.##....#
.#.#.#..#....##..
#.#.#.#.##.#.##.#

###.#.##.#.###.##
.#.##.#..##.#....
..##..##..##..###
.#.########.#....
.############.#..
.##..#..#..##..##
.###.#..#.###..##
..#.#.##.#.#.....
..#..####..#..#..

##.###.###..#
##.###.###..#
###..#####..#
##.....#....#
..##..#..####
#..#..##.#..#
#....#.#..##.

.#.#.##
#..##..
..#....
.#.####
##..###
#.#..##
.#.#...
##...##
##...##
.#.#...
###..##

.#.##.###.#...#
#.#....##..#...
#.#....##..#...
.#.##.###.#...#
#.#..###.####.#
....####.##..#.
####.....##.#..
.##.#.###...###
##.#####..###..
#.##..#....#.#.
###..##.#.#.##.
#...#...##.##.#
.#...###....##.
.###...###.#...
.###...###.#.#.

##..##......#
####.##.##.##
....#..#..##.
##.#..##..##.
#.....#....#.
#.....#....#.
##.#..##..##.

###.......#
##...##...#
..#.#..#.#.
..#.#..#.#.
..##.##.##.
...######..
...#.##.#..
...######..
..###..###.

##....#####...#
.###....#.###..
##..##..#.##..#
#..#.##.#..##..
#####........##
..#.#.#.#.###.#
###...#..#..###
.#...##.#.###..
..##......#.##.
.#.#.#.##.####.
#####...#.###.#
.#.##.########.
..######..##...
#..#.#..###..##
#..###..###..##
#..###..###..##
#..#.#..###..##

...#.#.#..#
######....#
.#####.#..#
.##...#.##.
#.#.###....
.#.#.#.####
.#.#.#.####

#######.###.#.#
#..#..####.##.#
.##.....##.#...
#..##..#..####.
#..#.#.###...##
.##...#.#..###.
....#.#.#.##...
.......#..#..#.
........#...##.
#..#..##.##.##.
####.##...#.###
####.##...#.###
#..#..##.#..##.
........#...##.
.......#..#..#.
....#.#.#.##...
.##...#.#..###.

...####....
.#.##...###
###.##.##.#
#.#..#...#.
#.#..#...#.
###.##.##.#
.#.##...###
.#.####....
.#.#...##..
....#..#.##
#.###.#.###
#..####...#
#.#.#.#####
#.#.#.#####
#..####...#

..#.#.#
##..#.#
###.#.#
.....##
...#.#.
##...##
...#.#.
##.#...
##.....

#..#.#.....##
##..##.###..#
##.#.#...####
#..#.##.#####
###..........
.##....#.####
..###.#.##...
..###.#.##...
.##....#.####
###..........
#..#.##.#####
#..#.#...####
##..##.###..#
#..#.#.....##
#..#.#.....##

###.#..#.##
....####...
..#####.##.
#...####...
.###....###
.#...##...#
.#.######.#
.####..####
.####..####
.#.######.#
.#...##...#

####..#
#......
#.#####
...#..#
.#.....
.######
#.#####
...####
#......
.#.....
.#.....
#......
..#####
#.#####
.######
.#.....
...#..#

####........#
.##...####...
.##.#.#..#.#.
######....###
.......##....
####........#
.##.#.....##.
.##...#..#...
....#.####.#.

###.####.
#..#....#
#..######
.#..####.
###......
##.#....#
##.#....#
###......
.##.####.
#..######
#..#....#
###.####.
#.#######

..#.#.###.##.
#..###.##..#.
###..##.#.##.
###..##.#.##.
#..###.##..#.
..#.#.###.##.
#####.####...
..#####....##
###.....##.#.
#.####....#..
.###..##.#..#
.###..##.#..#
#.####....#..
###.....##.#.
..#####....##
#####.####...
..#.#.#.#.##.

###.##..##.
.#.###..###
###...##...
......##...
.##.##..##.
...#..##..#
#.#.######.
#.#.#.##.#.
..###....##
###..#####.
.##.#.##.#.
.##########
.#.........
###...##...
##..#.##.#.
#.##.####.#
#.##.####.#

#.#....
#....##
.#.#...
...#.##
....###
#.#..##
#....##
#....##
#.##.##
....###
...#.##
.#.#...
#....##
#.#....
.##....

#.#..##.#..
.#..#.#....
.#.####.#..
###.#..#...
..###..##..
.#..##.####
..##....#..
.#.####....
...#....#..
.#.##......
.###..###..
.##....#.##
####.#.####
#.#......##
#.#....#.##
####.#.####
.##....#.##

######.#..###
#.##.###.....
##..##....#..
.####.#.###..
.........####
.####..#.....
.####..##..##
..##..####...
.#..##.#..#..
#.##.#..#....
#....#..##...
.####.####...
#########.#..
.####.#.##...
..##..##..###
.#..#...##.##
######....###

....#.#.#
#..#.###.
####....#
.##..#..#
#..#.#.#.
########.
#..##...#
#..##...#
########.
#..#.#.##
.##..#..#
####....#
#..#.###.

...#.##..
####..#.#
.########
.########
####..#.#
...#.##..
######..#
....###.#
....###.#
######..#
...#.##..
####..#.#
.#.######

#.#.##.##..#.
#.......###..
##..##.##..#.
..###....#.#.
.#..##..#.##.
.....####..#.
##..##..###.#
##..##..###.#
.....####..#.
.#..##..#.##.
..###....#.#.
##..#####..#.
#.......###..
#.#.##.##..#.
#.#.##.##..#.
#.......###..
##..#####..#.

##.#.##.....#
##.#.##...#.#
#...##..###..
..#.##.#...##
.#.##.#....#.
.#.##.#....#.
..#.##.#...##

###...##..#....
#..#..#..###..#
.#.#####...#..#
#.##..##..#....
#.......##.....
#.####.....#..#
.....#.#.##.##.
#.#...####.....
#.#...####.....
.....#.#.##.##.
#.#####....#..#

#.#..#..##...
#.#..#..##...
.####..##.#.#
#....#.####..
..#..#.#.##.#
..#...##..###
..#...##..###
..#....#.##.#
#....#.####..

............#.#
.##.##.##.#..#.
.##....##.#..##
#..#..#..#...#.
.########.##.##
#..####..##....
#.######.#...#.
.#......#.#.#..
.#......#.#....

..##..##..##..#
##.####.###....
.#.#..#.#..####
....###........
.###..###...##.
.##.##.##.#....
...#..#...#.##.
#..#..#..#.....
###.##.###..##.
##########.#..#
....##.....#..#

#.#..#.#..#####
#..##..###.#...
...##.....#.###
#......#.......
#.####.#.#.#...
##....#.###.###
...##....##.#..

######...
.......##
##..####.
.#..#.###
.#..#.#.#
.####....
######.#.
.####.##.
.####.###

.######....
#..##..###.
.#....#....
########..#
#.#..#.####
..####.....
.#....#....

..#.####.
..#.####.
..#......
###......
#####..##
.#.##..##
.##.#....
...#....#
...######
#..#.##.#
....####.

.###..###..#.
#..#..#..##..
###....######
.###..###..##
.#..##..#..#.
####..#######
.#.#..#.#..#.
##.#..#.####.
....##.......

...####.##.
...#..#....
###..##.###
####.#....#
##.######..
..#.###.#.#
..#.##..#.#

#.##.#.
##.....
##.....
#.##.#.
.#.##.#
#.#.#.#
....###
....###
#.###.#

..#.###.####.
#.####.######
######.######
..#.###.####.
.#.###.......
.##.....#..#.
##..#..##..##
#.#......##..
...#..###..##
.######.####.
#...##.#.##.#
#..#..#..##..
####.##.#..#.

###.##.########
#.#.....##..##.
####.##........
.#.#...........
.#.#.##########
.#.##..........
.....##.##..##.
..####.########
###.###...##...
#.#....#..##..#
.#..#.#########
...#...#..##..#
......#........
...#..#########
##.#....##..##.

#..##..##.###...#
#......#.##.##.#.
..####..####...##
.#.##.#.##...###.
.#.##.#.##...###.
..####..####...##
#......#.##.##.#.
#..##..##.###...#
.#.##.#.#..##..#.
.#.##.#.##.###.#.
........##....###
##.##.####.......
#..#...###.#...#.
#......#.##..##.#
..#..#...#.##...#

.....#..##..#..
#..#...####...#
....#.#..#.#.#.
....##..##..##.
#..###......###
....#.#....#.#.
########..#####
#..###.#..#.###
....####..####.
.##.###.##.###.
.##...######...
.##.##.#..#.##.
####.###..###.#
.##.###....###.
.....########..
#..#.#..##..#.#
#..##.##..##.##

.#####.#..#.#####
#.#.##......##.#.
.#.#..#.##.#..#.#
.#.#.#......#.#.#
##.#.########.#.#
#....########....
#....########....
##.#.########.#.#
.#.#.#......#.#.#
.#.#..#.##.#..#.#
#.#.##......##.#.
.#####.#..#.#####
##..###.##.###..#
#...##....#.##...
...#.##.##.##.#..
..##..#.##.#..##.
###...######...##

.##..#.
.....#.
#####.#
#..#.##
#..####
.##.###
#..#.#.
....###
.....#.
##.#.##
#..##.#
#..##.#
#..#...
.....#.
.....#.

#.##.#.
.###..#
#####.#
#####.#
.###..#
#.##.#.
.###.##
.#..###
.#..###
.###.##
####.#.
.###..#
#####.#

...#.#.##..
...#.#.##..
.#.##....#.
#..#.#.#..#
.##.#.#..#.
#.#.#.#..##
#....####..
##.##.#....
##.##.#....
#....####..
###.#.#..##
.##.#.#..#.
#..#.#.#..#
.#.##....#.
...#.#.##..

###..####....##
###..####.##.##
.#.##.#..####..
########......#
#......#.####.#
.#.##.#...##...
##.....#......#
##....###....##
.#.##.#.#.##.#.

#.#..##
#.##..#
#..#.#.
#..#.#.
#.##..#
#.#.###
..##...
#####..
.#.#..#
.##.##.
##..#..
.#..###
.#..###

..#..###.##..
#...####.##..
#...####.##..
..#..###.##..
##.####...#..
...#.#...#.##
...##.#..##..
.#...##.###.#
.#.#.##.###.#

.###...
...##..
#.###..
#.###..
.#.##..
.###...
..##...
...####
..#.###
.#.....
.#.....
.##....
#....##
..#....
.######
#...#..
###....

##.....##
..#..####
####..#..
###....##
##.#.#.##
.#..##.##
###.#.#..

#.##..##.#.##.##.
.##.#.#...##....#
.....###.#.#.#..#
....#..##.#.#.##.
.......#.####..##
.....#...#.#..##.
#..##.#..##....#.
#..##.#..##....#.
.....#...#.#..##.
.......#.####..##
....#..##.#.#.##.

###.#..#.###.##..
############.#.#.
##..#..#..#####.#
##..#..#..#####.#
############.#.#.
###.#..#.###.##..
.....##.....#..#.
..########...####
##..#..#..######.
.###....###...#..
..##.##.###.#.#.#
..#......#....###
.###.##.###.#..#.
###.####.######.#
#.#..##..#.###.##

###...#####....
......#....#...
#..#.#......#.#
##.....#..#....
##.############
.#.###.####.###
##.#.#.#..#.#.#
#.#.#...##...#.
#.##.##....##.#
#.###.#....#.##
#.###.#....#.##

.##.######.##.#
#....#..#....#.
##############.
#..#.#..#.#..#.
.##..####..##..
####......#####
#..#.#..#.#..#.

........#.##.#.
......##..##..#
#.######......#
#.##.#..##..##.
.#..#.#..####..
..##..#........
########..##..#
#######..####..
.####...#.##.#.

#.#..#.###..#
##..####.#.#.
.####....###.
.####.#.#.#..
.#..#.....###
..##...#.#...
..##...#.#...
.#..#.....###
.####.#.#.#..
.####....###.
##..####.#.#.

.###....###.#
#..#.##.#..#.
#..#.##.#..#.
.###....###.#
..#......#...
...#....#....
#...#..#...##
#..........#.
............#
##.#.##.#.###
##..#..#...##
..########..#
.##.#..#.##..

..####.##.##.
.#..####.##.#
.....#...#..#
.....#...#..#
.#..####.##.#
..####.##.##.
#...#.##...#.
#..#...#..#.#
..#.#.....#..
...#####.#...
#..#..#.#....
#..#..#.#...#
...#####.#...
..#.#.....#..
#..#...#..#.#
#...#.##...#.
..####.##.##.

..#.#...#
..#.#.#.#
..#..#.#.
.###....#
###..##.#
..###..#.
...##..#.
###.###..
.########
.####....
.#.....##
.##..#...
..#.###..
####.#.##
...#####.
...#####.
####.#.##

##..##..#
####.#...
##..#....
...##..#.
...##..#.
##..#....
####.#...
##..###.#
##.###.##
####..##.
##..#.##.
###.#..##
###.##..#
..#.##.#.
#####....

.##.#.###.#..
....#.##..#..
......#.#....
#..#..#.###..
##########...
.##....#.##.#
#..#..#..#...
.##...####.##
#..#.##.##...

...##...##...#..#
#.#...###.###..#.
##..##..#.#.#####
#......#....###.#
#......#....###.#
##..##..#.#.#####
#.#...###.###..##
...##...##...#..#
.#######...#.....
.#.#...###..###.#
.#...####..#.#...
.#...####..#.#...
.#.#...###..###.#

.####......####..
......####.......
#######..########
.#####.##.#####..
.......##.......#
##..###..###..###
.......##.......#

####..##..#
.##..###..#
.....#.####
.##.#..#..#
.....##....
#..##.#....
......#.###
####.######
#######....
.##.#...##.
#..####....
.##...#####
#..#.######

#..#.####
.....#..#
#..#.....
.....####
#.####..#
.##.#.##.
.##......
#####....
....#....

....####.##..
###.....#.##.
......#..###.
...#######.#.
...#######.#.
......##.###.
###.....#.##.
....####.##..
##..#..#..#.#
##.....#...##
..##.#.#..###
##.##.##.##.#
..#..#..####.
..###.#......
##..#.####..#
##.#.#.##..#.
........#####

####.####.###..
....##..##....#
#####....#####.
.#.###..###.#.#
##.########.##.
#.#.######.#.##
##...####...###
##.#..##..#.###
##.#..##..#.##.
..##.####.##..#
....#.##.#.....
....#.##.#.....
..##.####.##..#

..#.##.#...##
#.######.#.##
.#.#..#.#.###
###....###...
#..##.#..#...
.###..###....
#.#....#.#.##

#....###.####
##..##.##....
##..####..##.
#.##.###.....
....#.#.#####
#.##.##..####
.......######
.#..#..#.#..#
#.##.##..#..#
......####..#
.#..#....#..#
#....#.#..##.
.####..#.####

.#..##.##.##.
.###..####..#
##.####..####
...##########
##..##.##.##.
##...........
.......##....
####..#..#..#
##.#..####..#
#...##.##.##.
..##..####..#
#.#..#....#..
#......##....

...##..##.#
#.##...###.
.#..###.##.
.#..###.##.
#.###..###.
...##..##.#
#..#..#.##.
#..#.#.#.##
#####...###
##.#...#.#.
#.####..#.#
#.##..#.##.
#..####.###
.#.#..#.#..
.#.#..#.#..

.###.......
####.......
.#......#.#
......##..#
#.#..#..#..
.#..##.##..
.#..####...
.####.#.#..
.#.####....
##.#.##..#.
##.#.##..#.

#####.###
.#####.##
..#.#.###
..#.#.##.
.#####.##
#####.###
##.#....#
#..##....
#..##....
 ";
            }
            else
            {
                Notes = @"#.##..##.
..#.##.#.
##......#
##......#
..#.##.#.
..##..##.
#.#.##.#.

#...##..#
#....#..#
..##..###
#####.##.
#####.##.
..##..###
#....#..#
 ";
            }
            List<string> Pattern = new List<string>();
            string newPattern = "";
            for (int i = 0; i < Notes.Split(delimiter_line, StringSplitOptions.None).Count(); i++)
            {
                if (Notes.Split(delimiter_line, StringSplitOptions.None)[i].Contains("."))
                {
                    newPattern += Notes.Split(delimiter_line, StringSplitOptions.None)[i] + "\r\n";
                }
                else
                {
                    Pattern.Add(newPattern);
                    newPattern = "";
                }
            }
            long Sum = 0;
            long counter = 0;
            #region Horizontal pattern
            bool FindedHorizontalPattern = false;
            int contapattern = 0;
            foreach (string pattern in Pattern)
            {
                contapattern += 1;
                Console.WriteLine($"Horizontal pattern {contapattern} e counter {counter}");
                Dictionary<string, int> ToCompare = new Dictionary<string, int>();
                var p = pattern.Split(delimiter_line, StringSplitOptions.None);
                for (int i = 0; i < p.Count(); i++)
                {
                    string line = p[i];
                    try
                    {
                        ToCompare.Add(CreateMD5(line), i);
                    }
                    catch (Exception ex)
                    {
                        //Is "i" the reflection horizontal line?
                        FindedHorizontalPattern = true;
                        if (i < p.Count() - 1 - i)
                        {
                            for (int j = i; j > 0; j--)
                            {
                                if (CreateMD5(p[i - j]) != CreateMD5(p[i + j - 1]))
                                {
                                    FindedHorizontalPattern = false;
                                    break;
                                }
                            }
                            if (FindedHorizontalPattern)
                            {
                                Sum += i * 100;
                                counter += 1;
                                break;
                            }
                        }
                        else
                        {
                            for (int j = 0; j < p.Count() - 1 - i; j++)
                            {
                                if (CreateMD5(p[i - 1 - j]) != CreateMD5(p[i + j]))
                                {
                                    FindedHorizontalPattern = false;
                                    break;
                                }
                            }
                            if (FindedHorizontalPattern)
                            {
                                Sum += i * 100;
                                counter += 1;
                                break;
                            }
                        }
                    }
                }
            }
            #endregion
            #region Vertical pattern
            bool FindedVerticalPattern = false;
            contapattern = 0;
            foreach (string pattern in Pattern)
            {
                contapattern += 1;
                Console.WriteLine($"Vertical pattern {contapattern} e counter {counter}");
                string TransformedPattern = VerticalToHorizontalPattern(pattern);
                Dictionary<string, int> ToCompare = new Dictionary<string, int>();
                var p = TransformedPattern.Split(delimiter_line, StringSplitOptions.None);
                for (int i = 0; i < p.Count(); i++)
                {
                    string line = p[i];
                    try
                    {
                        ToCompare.Add(CreateMD5(line), i);
                    }
                    catch (Exception ex)
                    {
                        //Is "i" the reflection vertical line?
                        FindedVerticalPattern = true;
                        if (i < p.Count() - 1 - i)
                        {
                            for (int j = i; j > 0; j--)
                            {
                                if (CreateMD5(p[i - j]) != CreateMD5(p[i + j - 1]))
                                {
                                    FindedVerticalPattern = false;
                                    break;
                                }
                            }
                            if (FindedVerticalPattern)
                            {
                                Sum += i;
                                counter += 1;
                                break;
                            }
                        }
                        else
                        {
                            for (int j = 0; j < p.Count() - 1 - i; j++)
                            {
                                if (CreateMD5(p[i - 1 - j]) != CreateMD5(p[i + j]))
                                {
                                    FindedVerticalPattern = false;
                                    break;
                                }
                            }
                            if (FindedVerticalPattern)
                            {
                                Sum += i;
                                counter += 1;
                                break;
                            }
                        }
                    }
                }
            }
            #endregion
            //31891 too low
            //32121 too high
            //31956
        }

        public string VerticalToHorizontalPattern(string pattern)
        {
            Dictionary<int, string> Transformation = new Dictionary<int, string>();
            for (int i = 0; i < pattern.Split(delimiter_line, StringSplitOptions.None).Count(); i++)
            {
                var line = pattern.Split(delimiter_line, StringSplitOptions.None);
                for (int j = 0; j < line[i].Length; j++)
                {
                    if (Transformation.ContainsKey(j))
                    {
                        Transformation[j] += line[i][j];
                    }
                    else
                    {
                        Transformation.Add(j, line[i][j].ToString());
                    }

                }

            }
            string ToReturn = "";
            foreach (string value in Transformation.Values)
            {
                ToReturn += value + "\r\n";
            }
            return ToReturn;
        }
        public static string CreateMD5(string input)
        {
            // Use input string to calculate MD5 hash
            using (System.Security.Cryptography.MD5 md5 = System.Security.Cryptography.MD5.Create())
            {
                byte[] inputBytes = System.Text.Encoding.ASCII.GetBytes(input);
                byte[] hashBytes = md5.ComputeHash(inputBytes);

                //return  HexadecimalEncoding.ToHexString(hashBytes); // .NET 5 +

                // Convert the byte array to hexadecimal string prior to .NET 5
                StringBuilder sb = new System.Text.StringBuilder();
                for (int i = 0; i < hashBytes.Length; i++)
                {
                    sb.Append(hashBytes[i].ToString("X2"));
                }
                return sb.ToString();
            }
        }
        public void Part2(object input, bool test, ref object solution)
        {
            test = false;

            if (!test)
            {
                Notes = @"##....###.#..
########...#.
##.##.##.#.##
........###.#
........#.#.#
#######.###..
.#.##.#.#....
..####..##..#
##.##.##.##.#
##.##.##.##.#
..####..##..#
.#.##.#.#....
#######.###..
........#.#.#
........###.#

#.###..#..###
.#...##.####.
.#...##.####.
#.###..#..###
.#######.##.#
.#..##.#.#..#
..#..#.##.#..
##..##..###.#
######.##..#.
######.##....
##..##..###.#
..#..#.##.#..
.#..##.#.#..#

#......
#......
....#..
#.#.###
#####..
###.##.
...#.##
#.#.###
####.#.
..##..#
..##..#
####.#.
#.#.###
...#.##
###.##.
###.#..
#.#.###

.......#.
.#..#...#
######.##
#.##.##.#
#.##.##.#
#.##.##.#
#.##.####
######.##
.#..#...#

.##.#..#.##.###
####.#..#######
.##.##.#.######
#..#.#..#..#.##
.##.##.##.###..
..#.#.#.#.#.#..
....#.#..#.####

#####.##.##
.##..#.....
.##..####..
####......#
.##.#.##.#.
....##..##.
......##...

...#.##....##.#..
##..##########..#
.####..#..#..####
######..##..#####
#.##.#.####.#.##.
..##.#.#..#.#.##.
.####.######.####
......##..##.....
#.##.#.#..#.#.##.

#.##.##
######.
.#..#..
#.##.##
.#..#.#
......#
.#..#.#
.#..#.#
#....#.
#....##
#....##
#....#.
.#..#.#
.#..#.#
......#
.#..#.#
#.##.#.

..###.#
.#...##
####...
....###
....###
####...
.#...##

##..##......##...
##..##......##..#
.####.##.##.##.#.
.##.#.#..#..##.##
#.#.#.#.####...#.
.......#.#.#..#.#
######.####....#.
######.####....#.
.......#.#.#..#.#
#.#.#.#.####...#.
.##.#.#..#..##.##
.####.##.##.##.#.
##..##......##..#

...##..
..#....
..#....
..###..
###.#.#
##..#.#
.....##
......#
..#.#..

..##.###...####
......###.##.##
.#.#....##...##
#.#####.##..#..
#.####.###.....
....#.##.#..#..
..#.#.#.###....
..#.#.#.###....
....#.##....#..

###.##..#
.#.......
#.#..#..#
##.##....
.#..#.##.
.##...##.
#....####
.#.#.####
.#.#.####
#....####
.##...##.
.#..#.##.
.#.##....
#.#..#..#
.#.......

###.##..##.###...
.#..######..#.#..
##.#......#.##...
.##..####..##..##
####......####...
##.###..###.##.##
.####....####....
##.##....##.#####
...#.#..#......##
#.#.##..##.#.#...
#.##..##..##.##..
.#..#....#..#....
##....##....#####

###..#..#...#
##...#.#..#..
#..##..######
#..##..######
##...#.#..#..
###..#..#...#
###.##..#....
#.#..#..#.###
#########...#
..#...#..#..#
#.##.####..#.
#####...#..##
#...##..###.#
.###....#...#
.###....##..#

#####...#..####
#.....##..##..#
.....####......
#.##.####..####
#.#.#....#.####
##..##..###.##.
###...#.#.#####
#####.#..##....
....#.#.#.#....
...####.#...##.
.###..#...##..#
#....#....#.##.
..#.#####......
.#.#.#.#.##.##.
.#.###.#.##.##.

.##...##..#
.#.....#..#
###.###.##.
#..##..#..#
#..####....
....#..#..#
..#.####..#
..##....##.
#.#.###.##.
.###..#....
#.#.#.##..#
.#.########
.#.########
#.#.#.##..#
.###..#....
#.#.###.##.
.###....##.

##.#.##.#
##.##..##
..#.#..#.
..##....#
##.##..##
###.####.
..#######
....###..
..###..##
###.####.
..#..##..
##..####.
..#######
...#.##.#
##..#..#.

....####.#.....#.
###.#....#.#.#...
..##..###..#..###
..##..###..#..###
###.#....###.#...
....####.#.....#.
###.####.####.###
.#.#.##.#....#...
.#.#.##.#....#...

#..###...
#..#.#...
.....####
####..#.#
....#.##.
#####.##.
####.#.#.
######.##
.##.#..#.
#####.##.
#..#...#.
#..##..#.
####.#.#.
.##..#...
####..##.
.##.#..##
.##.#.##.

###..###.##.#
....#...#..#.
..#.##..#..#.
..##########.
##...###.##.#
####.##.#..#.
###...#######
...#.###....#
..#..########

.########....####
.##.##.##....##.#
#.#.##.#.####.#.#
..##..##......##.
#..#..#..#..#..#.
#.#.##.#.#..#.#.#
...#..#...##...#.
..######..##..###
.##.##.##....####

###.####..#.#
#########.###
#.####...#...
#.####...#...
##.######.###
###.####..#.#
##.#..#.##...
#..#.##.#...#
..#.########.
..#.########.
#..#.##.#...#

#.#......#.##..#.
##..#..#..##.#.##
.###....###.###.#
.#.##..##.#....#.
####.##..###.####
.###....###.....#
.#.#....#.#..#...
.##.####.##.##...
.##.####.##.##...

###.#.##.####.##.
..#..#...#..#...#
.##..#..#....#..#
...###.#......#.#
##..#.#.#.##.#.#.
.#..#..#..##..#..
.#.....#..##..#..

##.#.#...
.####..##
.####..##
##.#.#...
#...##...
...#..###
.###...#.
###..##..
#.###....

...####
..#.###
..#.###
...####
.###..#
.##....
.#..#..
#..##..
..#.###
..#.###
...##..
.#..#..
.##....
.###..#
...####

......##.###....#
###.#.#.#.#####.#
.###.#...##......
#..#.#.##....##..
.#.#.#..#..######
..#####.....####.
..#..#.#.##......
#.#.#.#.##.#.##.#
.#.#.#..#....##..
..##.#.##.##....#
..##.#.##.##....#
.#.#.#..#....##..
#.#.#.#.##.#.##.#

###.#.##.#.###.##
.#.##.#..##.#....
..##..##..##..###
.#.########.#....
.############.#..
.##..#..#..##..##
.###.#..#.###..##
..#.#.##.#.#.....
..#..####..#..#..

##.###.###..#
##.###.###..#
###..#####..#
##.....#....#
..##..#..####
#..#..##.#..#
#....#.#..##.

.#.#.##
#..##..
..#....
.#.####
##..###
#.#..##
.#.#...
##...##
##...##
.#.#...
###..##

.#.##.###.#...#
#.#....##..#...
#.#....##..#...
.#.##.###.#...#
#.#..###.####.#
....####.##..#.
####.....##.#..
.##.#.###...###
##.#####..###..
#.##..#....#.#.
###..##.#.#.##.
#...#...##.##.#
.#...###....##.
.###...###.#...
.###...###.#.#.

##..##......#
####.##.##.##
....#..#..##.
##.#..##..##.
#.....#....#.
#.....#....#.
##.#..##..##.

###.......#
##...##...#
..#.#..#.#.
..#.#..#.#.
..##.##.##.
...######..
...#.##.#..
...######..
..###..###.

##....#####...#
.###....#.###..
##..##..#.##..#
#..#.##.#..##..
#####........##
..#.#.#.#.###.#
###...#..#..###
.#...##.#.###..
..##......#.##.
.#.#.#.##.####.
#####...#.###.#
.#.##.########.
..######..##...
#..#.#..###..##
#..###..###..##
#..###..###..##
#..#.#..###..##

...#.#.#..#
######....#
.#####.#..#
.##...#.##.
#.#.###....
.#.#.#.####
.#.#.#.####

#######.###.#.#
#..#..####.##.#
.##.....##.#...
#..##..#..####.
#..#.#.###...##
.##...#.#..###.
....#.#.#.##...
.......#..#..#.
........#...##.
#..#..##.##.##.
####.##...#.###
####.##...#.###
#..#..##.#..##.
........#...##.
.......#..#..#.
....#.#.#.##...
.##...#.#..###.

...####....
.#.##...###
###.##.##.#
#.#..#...#.
#.#..#...#.
###.##.##.#
.#.##...###
.#.####....
.#.#...##..
....#..#.##
#.###.#.###
#..####...#
#.#.#.#####
#.#.#.#####
#..####...#

..#.#.#
##..#.#
###.#.#
.....##
...#.#.
##...##
...#.#.
##.#...
##.....

#..#.#.....##
##..##.###..#
##.#.#...####
#..#.##.#####
###..........
.##....#.####
..###.#.##...
..###.#.##...
.##....#.####
###..........
#..#.##.#####
#..#.#...####
##..##.###..#
#..#.#.....##
#..#.#.....##

###.#..#.##
....####...
..#####.##.
#...####...
.###....###
.#...##...#
.#.######.#
.####..####
.####..####
.#.######.#
.#...##...#

####..#
#......
#.#####
...#..#
.#.....
.######
#.#####
...####
#......
.#.....
.#.....
#......
..#####
#.#####
.######
.#.....
...#..#

####........#
.##...####...
.##.#.#..#.#.
######....###
.......##....
####........#
.##.#.....##.
.##...#..#...
....#.####.#.

###.####.
#..#....#
#..######
.#..####.
###......
##.#....#
##.#....#
###......
.##.####.
#..######
#..#....#
###.####.
#.#######

..#.#.###.##.
#..###.##..#.
###..##.#.##.
###..##.#.##.
#..###.##..#.
..#.#.###.##.
#####.####...
..#####....##
###.....##.#.
#.####....#..
.###..##.#..#
.###..##.#..#
#.####....#..
###.....##.#.
..#####....##
#####.####...
..#.#.#.#.##.

###.##..##.
.#.###..###
###...##...
......##...
.##.##..##.
...#..##..#
#.#.######.
#.#.#.##.#.
..###....##
###..#####.
.##.#.##.#.
.##########
.#.........
###...##...
##..#.##.#.
#.##.####.#
#.##.####.#

#.#....
#....##
.#.#...
...#.##
....###
#.#..##
#....##
#....##
#.##.##
....###
...#.##
.#.#...
#....##
#.#....
.##....

#.#..##.#..
.#..#.#....
.#.####.#..
###.#..#...
..###..##..
.#..##.####
..##....#..
.#.####....
...#....#..
.#.##......
.###..###..
.##....#.##
####.#.####
#.#......##
#.#....#.##
####.#.####
.##....#.##

######.#..###
#.##.###.....
##..##....#..
.####.#.###..
.........####
.####..#.....
.####..##..##
..##..####...
.#..##.#..#..
#.##.#..#....
#....#..##...
.####.####...
#########.#..
.####.#.##...
..##..##..###
.#..#...##.##
######....###

....#.#.#
#..#.###.
####....#
.##..#..#
#..#.#.#.
########.
#..##...#
#..##...#
########.
#..#.#.##
.##..#..#
####....#
#..#.###.

...#.##..
####..#.#
.########
.########
####..#.#
...#.##..
######..#
....###.#
....###.#
######..#
...#.##..
####..#.#
.#.######

#.#.##.##..#.
#.......###..
##..##.##..#.
..###....#.#.
.#..##..#.##.
.....####..#.
##..##..###.#
##..##..###.#
.....####..#.
.#..##..#.##.
..###....#.#.
##..#####..#.
#.......###..
#.#.##.##..#.
#.#.##.##..#.
#.......###..
##..#####..#.

##.#.##.....#
##.#.##...#.#
#...##..###..
..#.##.#...##
.#.##.#....#.
.#.##.#....#.
..#.##.#...##

###...##..#....
#..#..#..###..#
.#.#####...#..#
#.##..##..#....
#.......##.....
#.####.....#..#
.....#.#.##.##.
#.#...####.....
#.#...####.....
.....#.#.##.##.
#.#####....#..#

#.#..#..##...
#.#..#..##...
.####..##.#.#
#....#.####..
..#..#.#.##.#
..#...##..###
..#...##..###
..#....#.##.#
#....#.####..

............#.#
.##.##.##.#..#.
.##....##.#..##
#..#..#..#...#.
.########.##.##
#..####..##....
#.######.#...#.
.#......#.#.#..
.#......#.#....

..##..##..##..#
##.####.###....
.#.#..#.#..####
....###........
.###..###...##.
.##.##.##.#....
...#..#...#.##.
#..#..#..#.....
###.##.###..##.
##########.#..#
....##.....#..#

#.#..#.#..#####
#..##..###.#...
...##.....#.###
#......#.......
#.####.#.#.#...
##....#.###.###
...##....##.#..

######...
.......##
##..####.
.#..#.###
.#..#.#.#
.####....
######.#.
.####.##.
.####.###

.######....
#..##..###.
.#....#....
########..#
#.#..#.####
..####.....
.#....#....

..#.####.
..#.####.
..#......
###......
#####..##
.#.##..##
.##.#....
...#....#
...######
#..#.##.#
....####.

.###..###..#.
#..#..#..##..
###....######
.###..###..##
.#..##..#..#.
####..#######
.#.#..#.#..#.
##.#..#.####.
....##.......

...####.##.
...#..#....
###..##.###
####.#....#
##.######..
..#.###.#.#
..#.##..#.#

#.##.#.
##.....
##.....
#.##.#.
.#.##.#
#.#.#.#
....###
....###
#.###.#

..#.###.####.
#.####.######
######.######
..#.###.####.
.#.###.......
.##.....#..#.
##..#..##..##
#.#......##..
...#..###..##
.######.####.
#...##.#.##.#
#..#..#..##..
####.##.#..#.

###.##.########
#.#.....##..##.
####.##........
.#.#...........
.#.#.##########
.#.##..........
.....##.##..##.
..####.########
###.###...##...
#.#....#..##..#
.#..#.#########
...#...#..##..#
......#........
...#..#########
##.#....##..##.

#..##..##.###...#
#......#.##.##.#.
..####..####...##
.#.##.#.##...###.
.#.##.#.##...###.
..####..####...##
#......#.##.##.#.
#..##..##.###...#
.#.##.#.#..##..#.
.#.##.#.##.###.#.
........##....###
##.##.####.......
#..#...###.#...#.
#......#.##..##.#
..#..#...#.##...#

.....#..##..#..
#..#...####...#
....#.#..#.#.#.
....##..##..##.
#..###......###
....#.#....#.#.
########..#####
#..###.#..#.###
....####..####.
.##.###.##.###.
.##...######...
.##.##.#..#.##.
####.###..###.#
.##.###....###.
.....########..
#..#.#..##..#.#
#..##.##..##.##

.#####.#..#.#####
#.#.##......##.#.
.#.#..#.##.#..#.#
.#.#.#......#.#.#
##.#.########.#.#
#....########....
#....########....
##.#.########.#.#
.#.#.#......#.#.#
.#.#..#.##.#..#.#
#.#.##......##.#.
.#####.#..#.#####
##..###.##.###..#
#...##....#.##...
...#.##.##.##.#..
..##..#.##.#..##.
###...######...##

.##..#.
.....#.
#####.#
#..#.##
#..####
.##.###
#..#.#.
....###
.....#.
##.#.##
#..##.#
#..##.#
#..#...
.....#.
.....#.

#.##.#.
.###..#
#####.#
#####.#
.###..#
#.##.#.
.###.##
.#..###
.#..###
.###.##
####.#.
.###..#
#####.#

...#.#.##..
...#.#.##..
.#.##....#.
#..#.#.#..#
.##.#.#..#.
#.#.#.#..##
#....####..
##.##.#....
##.##.#....
#....####..
###.#.#..##
.##.#.#..#.
#..#.#.#..#
.#.##....#.
...#.#.##..

###..####....##
###..####.##.##
.#.##.#..####..
########......#
#......#.####.#
.#.##.#...##...
##.....#......#
##....###....##
.#.##.#.#.##.#.

#.#..##
#.##..#
#..#.#.
#..#.#.
#.##..#
#.#.###
..##...
#####..
.#.#..#
.##.##.
##..#..
.#..###
.#..###

..#..###.##..
#...####.##..
#...####.##..
..#..###.##..
##.####...#..
...#.#...#.##
...##.#..##..
.#...##.###.#
.#.#.##.###.#

.###...
...##..
#.###..
#.###..
.#.##..
.###...
..##...
...####
..#.###
.#.....
.#.....
.##....
#....##
..#....
.######
#...#..
###....

##.....##
..#..####
####..#..
###....##
##.#.#.##
.#..##.##
###.#.#..

#.##..##.#.##.##.
.##.#.#...##....#
.....###.#.#.#..#
....#..##.#.#.##.
.......#.####..##
.....#...#.#..##.
#..##.#..##....#.
#..##.#..##....#.
.....#...#.#..##.
.......#.####..##
....#..##.#.#.##.

###.#..#.###.##..
############.#.#.
##..#..#..#####.#
##..#..#..#####.#
############.#.#.
###.#..#.###.##..
.....##.....#..#.
..########...####
##..#..#..######.
.###....###...#..
..##.##.###.#.#.#
..#......#....###
.###.##.###.#..#.
###.####.######.#
#.#..##..#.###.##

###...#####....
......#....#...
#..#.#......#.#
##.....#..#....
##.############
.#.###.####.###
##.#.#.#..#.#.#
#.#.#...##...#.
#.##.##....##.#
#.###.#....#.##
#.###.#....#.##

.##.######.##.#
#....#..#....#.
##############.
#..#.#..#.#..#.
.##..####..##..
####......#####
#..#.#..#.#..#.

........#.##.#.
......##..##..#
#.######......#
#.##.#..##..##.
.#..#.#..####..
..##..#........
########..##..#
#######..####..
.####...#.##.#.

#.#..#.###..#
##..####.#.#.
.####....###.
.####.#.#.#..
.#..#.....###
..##...#.#...
..##...#.#...
.#..#.....###
.####.#.#.#..
.####....###.
##..####.#.#.

.###....###.#
#..#.##.#..#.
#..#.##.#..#.
.###....###.#
..#......#...
...#....#....
#...#..#...##
#..........#.
............#
##.#.##.#.###
##..#..#...##
..########..#
.##.#..#.##..

..####.##.##.
.#..####.##.#
.....#...#..#
.....#...#..#
.#..####.##.#
..####.##.##.
#...#.##...#.
#..#...#..#.#
..#.#.....#..
...#####.#...
#..#..#.#....
#..#..#.#...#
...#####.#...
..#.#.....#..
#..#...#..#.#
#...#.##...#.
..####.##.##.

..#.#...#
..#.#.#.#
..#..#.#.
.###....#
###..##.#
..###..#.
...##..#.
###.###..
.########
.####....
.#.....##
.##..#...
..#.###..
####.#.##
...#####.
...#####.
####.#.##

##..##..#
####.#...
##..#....
...##..#.
...##..#.
##..#....
####.#...
##..###.#
##.###.##
####..##.
##..#.##.
###.#..##
###.##..#
..#.##.#.
#####....

.##.#.###.#..
....#.##..#..
......#.#....
#..#..#.###..
##########...
.##....#.##.#
#..#..#..#...
.##...####.##
#..#.##.##...

...##...##...#..#
#.#...###.###..#.
##..##..#.#.#####
#......#....###.#
#......#....###.#
##..##..#.#.#####
#.#...###.###..##
...##...##...#..#
.#######...#.....
.#.#...###..###.#
.#...####..#.#...
.#...####..#.#...
.#.#...###..###.#

.####......####..
......####.......
#######..########
.#####.##.#####..
.......##.......#
##..###..###..###
.......##.......#

####..##..#
.##..###..#
.....#.####
.##.#..#..#
.....##....
#..##.#....
......#.###
####.######
#######....
.##.#...##.
#..####....
.##...#####
#..#.######

#..#.####
.....#..#
#..#.....
.....####
#.####..#
.##.#.##.
.##......
#####....
....#....

....####.##..
###.....#.##.
......#..###.
...#######.#.
...#######.#.
......##.###.
###.....#.##.
....####.##..
##..#..#..#.#
##.....#...##
..##.#.#..###
##.##.##.##.#
..#..#..####.
..###.#......
##..#.####..#
##.#.#.##..#.
........#####

####.####.###..
....##..##....#
#####....#####.
.#.###..###.#.#
##.########.##.
#.#.######.#.##
##...####...###
##.#..##..#.###
##.#..##..#.##.
..##.####.##..#
....#.##.#.....
....#.##.#.....
..##.####.##..#

..#.##.#...##
#.######.#.##
.#.#..#.#.###
###....###...
#..##.#..#...
.###..###....
#.#....#.#.##

#....###.####
##..##.##....
##..####..##.
#.##.###.....
....#.#.#####
#.##.##..####
.......######
.#..#..#.#..#
#.##.##..#..#
......####..#
.#..#....#..#
#....#.#..##.
.####..#.####

.#..##.##.##.
.###..####..#
##.####..####
...##########
##..##.##.##.
##...........
.......##....
####..#..#..#
##.#..####..#
#...##.##.##.
..##..####..#
#.#..#....#..
#......##....

...##..##.#
#.##...###.
.#..###.##.
.#..###.##.
#.###..###.
...##..##.#
#..#..#.##.
#..#.#.#.##
#####...###
##.#...#.#.
#.####..#.#
#.##..#.##.
#..####.###
.#.#..#.#..
.#.#..#.#..

.###.......
####.......
.#......#.#
......##..#
#.#..#..#..
.#..##.##..
.#..####...
.####.#.#..
.#.####....
##.#.##..#.
##.#.##..#.

#####.###
.#####.##
..#.#.###
..#.#.##.
.#####.##
#####.###
##.#....#
#..##....
#..##....
 ";
            }
            else
            {
                Notes = @"#.##..##.
..#.##.#.
##......#
##......#
..#.##.#.
..##..##.
#.#.##.#.

#...##..#
#....#..#
..##..###
#####.##.
#####.##.
..##..###
#....#..#
 ";
            }
            List<string> Pattern = new List<string>();
            string newPattern = "";
            for (int i = 0; i < Notes.Split(delimiter_line, StringSplitOptions.None).Count(); i++)
            {
                if (Notes.Split(delimiter_line, StringSplitOptions.None)[i].Contains("."))
                {
                    newPattern += Notes.Split(delimiter_line, StringSplitOptions.None)[i] + "\r\n";
                }
                else
                {
                    Pattern.Add(newPattern);
                    newPattern = "";
                }
            }
            long counter = 0;


            int count_pattern = 0;
            int count_repaired = 0;
            bool RepairedPattern = false;
            bool FindedHorizontalPattern = false;
            bool FindedVerticalPattern = false;
            foreach (string pattern in Pattern)
            {
                string OriginalPattern = pattern;
                string[] OriginalPatternArray = OriginalPattern.Split(delimiter_line, StringSplitOptions.None);
                Console.WriteLine($"Horizontal pattern {count_pattern} e counter repaired {count_repaired}");
                count_pattern += 1;

                //TryToRepair
                RepairedPattern = false;
                string NewPattern = "";
                string[] NewPatternArray = new string[OriginalPattern.Split(delimiter_line, StringSplitOptions.None).Length];

                for (int r1 = 0; r1 < OriginalPatternArray.Length - 1; r1++)
                {
                    for (int r2 = r1 + 1; r2 < OriginalPatternArray.Length - 1; r2++)
                    {
                        if (FindSmudge(OriginalPatternArray[r1], OriginalPatternArray[r2]))
                        {
                            NewPattern = RepairSmudge(OriginalPatternArray[r1], OriginalPatternArray[r2], OriginalPatternArray, r1, r2);
                            NewPatternArray = PopulatePatternArray(NewPattern);
                            if (FindHorizontalPattern(NewPatternArray) > 0)
                            {
                                count_repaired++;
                                RepairedPattern = true;
                                break;
                            }
                            else if (FindVerticalPattern(PopulatePatternArray(VerticalToHorizontalPattern(NewPattern))) > 0)
                            {
                                count_repaired++;
                                RepairedPattern = true;
                                break;
                            }
                            else
                            {
                                NewPattern = "";
                            }

                        }
                    }
                    if (!string.IsNullOrEmpty(NewPattern)) break;
                }
            }
            //21100 too low
            //38600 too high
        }


        public string[] PopulatePatternArray(string pattern)
        {
            var pat = pattern.Split(delimiter_line, StringSplitOptions.None);
            string[] patternArray = new string[pat.Length];
            for (int i = 0; i < pat.Length; i++)
            {
                patternArray[i] = pat[i];
            }
            return patternArray;
        }

        public long FindHorizontalPattern(string[] patternArray)
        {
            bool FindedHorizontalPattern = false;
            int counter = 0;
            long PartialSum = 0;
            Dictionary<string, int> ToCompare = new Dictionary<string, int>();
            for (int i = 0; i < patternArray.Count(); i++)
            {
                string line = patternArray[i];
                try
                {
                    ToCompare.Add(CreateMD5(line), i);
                }
                catch (Exception ex)
                {
                    //Is "i" the reflection horizontal line?
                    FindedHorizontalPattern = true;
                    if (i < patternArray.Count() - 1 - i)
                    {
                        for (int j = i; j > 0; j--)
                        {
                            if (CreateMD5(patternArray[i - j]) != CreateMD5(patternArray[i + j - 1]))
                            {
                                FindedHorizontalPattern = false;
                                break;
                            }
                        }
                        if (FindedHorizontalPattern)
                        {
                            PartialSum += i * 100;
                            counter += 1;
                            break;
                        }
                    }
                    else
                    {
                        for (int j = 0; j < patternArray.Count() - 1 - i; j++)
                        {
                            if (CreateMD5(patternArray[i - 1 - j]) != CreateMD5(patternArray[i + j]))
                            {
                                FindedHorizontalPattern = false;
                                break;
                            }
                        }
                        if (FindedHorizontalPattern)
                        {
                            PartialSum += i * 100;
                            counter += 1;
                            break;
                        }
                    }
                }
            }
            Sum += PartialSum;
            return PartialSum;
        }
        public long FindVerticalPattern(string[] patternArray)
        {
            long PartialSum = 0;
            bool FindedVerticalPattern = false;
            int counter = 0;
            Dictionary<string, int> ToCompare = new Dictionary<string, int>();
            for (int i = 0; i < patternArray.Count(); i++)
            {
                string line = patternArray[i];
                try
                {
                    ToCompare.Add(CreateMD5(line), i);
                }
                catch (Exception ex)
                {
                    //Is "i" the reflection horizontal line?
                    FindedVerticalPattern = true;
                    if (i < patternArray.Count() - 1 - i)
                    {
                        for (int j = i; j > 0; j--)
                        {
                            if (CreateMD5(patternArray[i - j]) != CreateMD5(patternArray[i + j - 1]))
                            {
                                FindedVerticalPattern = false;
                                break;
                            }
                        }
                        if (FindedVerticalPattern)
                        {
                            PartialSum += i * 100;
                            counter += 1;
                            break;
                        }
                    }
                    else
                    {
                        for (int j = 0; j < patternArray.Count() - 1 - i; j++)
                        {
                            if (CreateMD5(patternArray[i - 1 - j]) != CreateMD5(patternArray[i + j]))
                            {
                                FindedVerticalPattern = false;
                                break;
                            }
                        }
                        if (FindedVerticalPattern)
                        {
                            PartialSum += i * 100;
                            counter += 1;
                            break;
                        }
                    }
                }
            }
            Sum += PartialSum;
            return PartialSum;
        }
        public string RepairSmudge(string m1, string m2, string[] pat, int r1, int r2)
        {
            string NewPattern = "";
            for (int r = 0; r < pat.Length - 1; r++)
            {
                if (r == r1)
                {
                    NewPattern += pat[r2] + "\r\n";
                }
                else
                {
                    NewPattern += pat[r] + "\r\n";
                }
            }
            return NewPattern;
        }

        public bool FindSmudge(string m1, string m2)
        {
            bool ret = false;
            int matched = 0;
            for (int pos = 0; pos < m1.Length; pos++)
            {
                if (m1[pos] == m2[pos]) matched++;
            }
            if (matched == m1.Length - 1)
            {
                ret = true;
            }
            return ret;
        }
    }
}
